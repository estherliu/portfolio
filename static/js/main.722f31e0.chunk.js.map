{"version":3,"sources":["components/Header/Header.js","components/Intro/Intro.js","components/Languages/Languages.js","components/Tools/Tools.js","components/MyNavbar/MyNavbar.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Intro","Languages","Tools","MyNavbar","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","App","Grid","container","item","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAYeA,MATf,WACE,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,SAAf,qDCaSC,MAlBf,WACE,OACE,yBAAKD,UAAU,SACb,6BACE,wBAAIA,UAAU,YAAd,aAEF,6BACA,6BACE,uFACA,wJCQOE,MAjBf,WACE,OACE,yBAAKF,UAAU,aACb,6BACE,wBAAIA,UAAU,YAAd,0BAEF,6BACA,6BACE,sFACA,uBAAGA,UAAU,SAAb,qE,MCSOG,MAjBf,WACE,OACE,yBAAKH,UAAU,aACb,6BACE,wBAAIA,UAAU,YAAd,+BAEF,6BACA,6BACE,+DACA,oEACA,qDACA,sD,wECsCOI,MA9Cf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACG,CAAC,YAAa,YAAYC,KAAI,SAACC,EAAMC,GAAP,OAC7B,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,yBAAKT,UAAU,YAAYQ,QAIjC,kBAACH,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,KACE,yBAAKV,UAAU,YAAf,iBAED,CAAC,mBAAoB,aAAc,aAAa,qBAAqBO,KAAI,SAACC,EAAMC,GAAP,OACxE,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,yBAAKT,UAAU,YAAYQ,QAIjC,kBAACH,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,KACE,yBAAKV,UAAU,YAAf,yBAED,CAAC,SAAS,WAAW,SAASO,KAAI,SAACC,EAAMC,GAAP,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACpB,kBAACK,EAAA,EAAD,KACGJ,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OAErC,yBAAKT,UAAU,YAAYQ,U,gBCPxBM,MA5Bf,WACE,OACE,6BACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGlB,UAAU,UAC1B,kBAAC,EAAD,OAEF,kBAACe,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACb,yBAAKlB,UAAU,QACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,YChBMmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.722f31e0.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"headcontainer\">\n      <div className=\"title\">Chaoyi Liu </div>\n      <div className=\"annot\"> This is a software engineer LOVING technology.</div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Intro() {\n  return (\n    <div className=\"intro\">\n      <div>\n        <h1 className=\"subtitle\">About me</h1>\n      </div>\n      <hr/>\n      <div>\n        <p>Hi! My name is Chaoyi Liu. (Call me Esther if you like!)</p>\n        <p>\n          I have recently graduated from McGill University with a Bachelor's\n          degree in Software Engineering. (with Distinction!)\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Intro;\n","import React from \"react\";\n\nfunction Languages() {\n  return (\n    <div className=\"languages\">\n      <div>\n        <h1 className=\"subtitle\">Languages I often use</h1>\n      </div>\n      <hr />\n      <div>\n        <p>Java, C#, C, JavaScript, Python, HTML, CSS, MATLAB, SQL</p>\n        <p className=\"faded\">\n          I've also used: Bash, Arm assembly, UML, VHDL, Scala, LaTeX...\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Languages;\n","import React from \"react\";\nimport \"./Tools.css\";\n\nfunction Tools() {\n  return (\n    <div className=\"languages\">\n      <div>\n        <h1 className=\"subtitle\">Tools I have experience on</h1>\n      </div>\n      <hr />\n      <div>\n        <p>ASP.NET, React JS, Redux, Django</p>\n        <p>Git, Docker, Redis, MySQL, PostgreSQL</p>\n        <p>Agile, SCRUM planning </p>\n        <p>NumPy, Scikit-learn </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Tools;\n","import React from \"react\";\nimport { Divider, List, ListItem, ListItemIcon } from \"@material-ui/core\";\nimport InboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport MailIcon from \"@material-ui/icons/Mail\";\nimport \"./MyNavbar.css\";\n\nfunction MyNavbar() {\n  return (\n    <div>\n      <Divider />\n      <List>\n        {[\"Home Page\", \"Overview\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <div className=\"listtext\">{text}</div>\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <div className=\"listtext\">My projects:</div>\n        </ListItem>\n        {[\"Book lover forum\", \"Keiko corp\", \"Brainstorm\",\"Portfolio website\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <div className=\"listtext\">{text}</div>\n          </ListItem>\n        ))}\n      </List>\n      <Divider />\n      <List>\n        <ListItem>\n          <div className=\"listtext\">Contact Information:</div>\n        </ListItem>\n        {[\"Github\",\"LinkedIn\",\"Email\"].map((text, index) => (\n          <ListItem button key={text}>\n            <ListItemIcon>\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\n            </ListItemIcon>\n            <div className=\"listtext\">{text}</div>\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n}\n\nexport default MyNavbar;\n","import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Intro from \"./components/Intro/Intro\";\nimport Languages from \"./components/Languages/Languages\";\nimport Tools from \"./components/Tools/Tools\";\nimport MyNavbar from \"./components/MyNavbar/MyNavbar\";\nimport \"./App.css\";\nimport {Grid} from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div>\n      <Grid container>\n        <Grid item xs={2} className=\"navbar\">\n          <MyNavbar />\n        </Grid>\n        <Grid item xs={10}>\n          <div className=\"head\">\n            <Header />\n          </div>\n          <div className=\"panelline\">\n            <div className=\"panel\">\n              <Intro />\n            </div>\n            <div className=\"panel\">\n              <Languages />\n            </div>\n            <div className=\"panel\">\n              <Tools />\n            </div>\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}