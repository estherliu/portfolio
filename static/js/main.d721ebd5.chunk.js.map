{"version":3,"sources":["components/Tools/Tools.js","components/Header/Header.js","components/Languages/Languages.js","components/Intro/Intro.js","components/MyContent/MyContent.js","components/Appbar/Appbar.js","serviceWorker.js","index.js"],"names":["Tools","className","Header","Languages","Intro","MyContent","Fragment","ElevationScroll","props","children","window","trigger","useScrollTrigger","disableHysteresis","threshold","target","undefined","React","cloneElement","elevation","useStyles","makeStyles","theme","appbar","background","color","toolbar","display","justifyContent","flexWrap","button","margin","borderColor","fontSize","fontStyle","icon","Appbar","styles","CssBaseline","AppBar","Toolbar","Button","IconButton","href","Container","Box","my","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oZAoBeA,MAjBf,WACE,OACE,yBAAKC,UAAU,aACb,6BACE,wBAAIA,UAAU,YAAd,+BAEF,6BACA,6BACE,+DACA,oEACA,qDACA,sD,MCFOC,MATf,WACE,OACE,yBAAKD,UAAU,iBACb,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,SAAf,qDCYSE,MAjBf,WACE,OACE,yBAAKF,UAAU,aACb,6BACE,wBAAIA,UAAU,YAAd,0BAEF,6BACA,6BACE,sFACA,uBAAGA,UAAU,SAAb,qECSOG,MAlBf,WACE,OACE,yBAAKH,UAAU,SACb,6BACE,wBAAIA,UAAU,YAAd,aAEF,6BACA,6BACE,uFACA,wJ,MCiBOI,MArBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKL,UAAU,QACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,SACb,kBAAC,EAAD,UCJV,SAASM,EAAgBC,GAAQ,IACvBC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OAIZC,EAAUC,YAAiB,CAC/BC,mBAAmB,EACnBC,UAAW,EACXC,OAAQL,EAASA,SAAWM,IAG9B,OAAOC,IAAMC,aAAaT,EAAU,CAClCU,UAAWR,EAAU,EAAI,IAI7B,IAAMS,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,WAAY,wBACZC,MAAO,SAETC,QAAS,CACPC,QAAS,OACTC,eAAgB,gBAChBC,SAAU,QAEZC,OAAQ,CACNC,OAAQ,GACRN,MAAO,QACPO,YAAa,QACbC,SAAU,GACVC,UAAW,QAEbC,KAAM,CACJV,MAAO,aAoDIW,MAhDf,SAAgB5B,GACd,IAAM6B,EAASjB,IACf,OACE,kBAAC,IAAMd,SAAP,KACE,kBAACgC,EAAA,EAAD,MACA,kBAAC/B,EAAoBC,EACnB,kBAAC+B,EAAA,EAAD,CAAQtC,UAAWoC,EAAOd,QACxB,kBAACiB,EAAA,EAAD,CAASvC,UAAWoC,EAAOX,SACzB,6BACE,kBAACe,EAAA,EAAD,CAAQxC,UAAWoC,EAAOP,QAA1B,aACA,kBAACW,EAAA,EAAD,CAAQxC,UAAWoC,EAAOP,QAA1B,gBAEF,yBAAK7B,UAAU,YACb,kBAACyC,EAAA,EAAD,CACEzC,UAAWoC,EAAOF,KAClBQ,KAAK,oDACL5B,OAAO,UAEP,kBAAC,IAAD,OAEF,kBAAC2B,EAAA,EAAD,CACEzC,UAAWoC,EAAOF,KAClBQ,KAAK,+BACL5B,OAAO,UAEP,kBAAC,IAAD,OAEF,kBAAC2B,EAAA,EAAD,CACEzC,UAAWoC,EAAOF,KAClBQ,KAAK,6BAEL,kBAAC,IAAD,WAOV,kBAACH,EAAA,EAAD,MACA,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,kBAAC,EAAD,UCpFUC,QACW,cAA7BrC,OAAOsC,SAASC,UAEe,UAA7BvC,OAAOsC,SAASC,UAEhBvC,OAAOsC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d721ebd5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Tools.css\";\n\nfunction Tools() {\n  return (\n    <div className=\"languages\">\n      <div>\n        <h1 className=\"subtitle\">Tools I have experience on</h1>\n      </div>\n      <hr />\n      <div>\n        <p>ASP.NET, React JS, Redux, Django</p>\n        <p>Git, Docker, Redis, MySQL, PostgreSQL</p>\n        <p>Agile, SCRUM planning </p>\n        <p>NumPy, Scikit-learn </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Tools;\n","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header() {\n  return (\n    <div className=\"headcontainer\">\n      <div className=\"title\">Chaoyi Liu </div>\n      <div className=\"annot\"> This is a software engineer LOVING technology.</div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Languages() {\n  return (\n    <div className=\"languages\">\n      <div>\n        <h1 className=\"subtitle\">Languages I often use</h1>\n      </div>\n      <hr />\n      <div>\n        <p>Java, C#, C, JavaScript, Python, HTML, CSS, MATLAB, SQL</p>\n        <p className=\"faded\">\n          I've also used: Bash, Arm assembly, UML, VHDL, Scala, LaTeX...\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Languages;\n","import React from \"react\";\n\nfunction Intro() {\n  return (\n    <div className=\"intro\">\n      <div>\n        <h1 className=\"subtitle\">About me</h1>\n      </div>\n      <hr/>\n      <div>\n        <p>Hi! My name is Chaoyi Liu. (Call me Esther if you like!)</p>\n        <p>\n          I have recently graduated from McGill University with a Bachelor's\n          degree in Software Engineering. (with Distinction!)\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Intro;\n","import React from \"react\";\nimport Tools from \"../Tools/Tools\";\nimport Header from \"../Header/Header\";\nimport Languages from \"../Languages/Languages\";\nimport Intro from \"../Intro/Intro\";\nimport \"./MyContent.css\";\n\nfunction MyContent() {\n  return (\n    <React.Fragment>\n      <div className=\"head\">\n        <Header />\n      </div>\n      <div className=\"panelline\">\n        <div className=\"panel\">\n          <Intro />\n        </div>\n        <div className=\"panel\">\n          <Languages />\n        </div>\n        <div className=\"panel\">\n          <Tools />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default MyContent;\n","import React from \"react\";\nimport {\n  makeStyles,\n  useScrollTrigger,\n  CssBaseline,\n  AppBar,\n  Toolbar,\n  Container,\n  Box,\n  Button,\n  IconButton,\n} from \"@material-ui/core\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport MyContent from \"../MyContent/MyContent\";\n\nfunction ElevationScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    target: window ? window() : undefined,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nconst useStyles = makeStyles((theme) => ({\n  appbar: {\n    background: \"rgba(87, 69, 69, 0.5)\",\n    color: \"white\",\n  },\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    flexWrap: \"wrap\"\n  },\n  button: {\n    margin: 10,\n    color: \"white\",\n    borderColor: \"white\",\n    fontSize: 15,\n    fontStyle: \"bold\",\n  },\n  icon: {\n    color: \"white\",\n  },\n}));\n\nfunction Appbar(props) {\n  const styles = useStyles();\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <ElevationScroll {...props}>\n        <AppBar className={styles.appbar}>\n          <Toolbar className={styles.toolbar}>\n            <div>\n              <Button className={styles.button}>Home Page</Button>\n              <Button className={styles.button}>My Projects</Button>\n            </div>\n            <div className=\"contacts\">\n              <IconButton\n                className={styles.icon}\n                href=\"https://www.linkedin.com/in/chaoyi-liu-a8a3b4149/\"\n                target=\"_blank\"\n              >\n                <LinkedInIcon />\n              </IconButton>\n              <IconButton\n                className={styles.icon}\n                href=\"https://github.com/estherliu\"\n                target=\"_blank\"\n              >\n                <GitHubIcon />\n              </IconButton>\n              <IconButton\n                className={styles.icon}\n                href=\"mailto:chaoyi97@gmail.com\"\n              >\n                <EmailIcon />\n              </IconButton>\n            </div>\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n\n      <Toolbar />\n      <Container>\n        <Box my={2}>\n          <MyContent />\n        </Box>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Appbar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Appbar from './components/Appbar/Appbar';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Appbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}